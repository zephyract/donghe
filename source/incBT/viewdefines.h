/*****************************************************************************
*  Copyright Statement:
*  --------------------
*  This software is protected by Copyright and the information contained
*  herein is confidential. The software may not be copied and the information
*  contained herein may not be used or disclosed except with the written
*  permission of MediaTek Inc. (C) 2008
*
*  BY OPENING THIS FILE, BUYER HEREBY UNEQUIVOCALLY ACKNOWLEDGES AND AGREES
*  THAT THE SOFTWARE/FIRMWARE AND ITS DOCUMENTATIONS ("MEDIATEK SOFTWARE")
*  RECEIVED FROM MEDIATEK AND/OR ITS REPRESENTATIVES ARE PROVIDED TO BUYER ON
*  AN "AS-IS" BASIS ONLY. MEDIATEK EXPRESSLY DISCLAIMS ANY AND ALL WARRANTIES,
*  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE IMPLIED WARRANTIES OF
*  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE OR NONINFRINGEMENT.
*  NEITHER DOES MEDIATEK PROVIDE ANY WARRANTY WHATSOEVER WITH RESPECT TO THE
*  SOFTWARE OF ANY THIRD PARTY WHICH MAY BE USED BY, INCORPORATED IN, OR
*  SUPPLIED WITH THE MEDIATEK SOFTWARE, AND BUYER AGREES TO LOOK ONLY TO SUCH
*  THIRD PARTY FOR ANY WARRANTY CLAIM RELATING THERETO. MEDIATEK SHALL ALSO
*  NOT BE RESPONSIBLE FOR ANY MEDIATEK SOFTWARE RELEASES MADE TO BUYER'S
*  SPECIFICATION OR TO CONFORM TO A PARTICULAR STANDARD OR OPEN FORUM.
*
*  BUYER'S SOLE AND EXCLUSIVE REMEDY AND MEDIATEK'S ENTIRE AND CUMULATIVE
*  LIABILITY WITH RESPECT TO THE MEDIATEK SOFTWARE RELEASED HEREUNDER WILL BE,
*  AT MEDIATEK'S OPTION, TO REVISE OR REPLACE THE MEDIATEK SOFTWARE AT ISSUE,
*  OR REFUND ANY SOFTWARE LICENSE FEES OR SERVICE CHARGE PAID BY BUYER TO
*  MEDIATEK FOR SUCH MEDIATEK SOFTWARE AT ISSUE.
*
*  THE TRANSACTION CONTEMPLATED HEREUNDER SHALL BE CONSTRUED IN ACCORDANCE
*  WITH THE LAWS OF THE STATE OF CALIFORNIA, USA, EXCLUDING ITS CONFLICT OF
*  LAWS PRINCIPLES.  ANY DISPUTES, CONTROVERSIES OR CLAIMS ARISING THEREOF AND
*  RELATED THERETO SHALL BE SETTLED BY ARBITRATION IN SAN FRANCISCO, CA, UNDER
*  THE RULES OF THE INTERNATIONAL CHAMBER OF COMMERCE (ICC).
*
*****************************************************************************/


/*******************************************************************************
 *
 * Filename:
 * ---------
 * ViewDefines.h
 *
 * Project:
 * --------
 *   PNDAPP
 *
 * Description:
 * ------------
 *   Header File For GImage
 *
 * Author:
 * -------
 * mcn07049
 *
 *------------------------------------------------------------------------------
 * $Revision: #19 $
 * $Modtime:$ 2008/06/12
 * $Log:$
 *
 *******************************************************************************/
#ifndef __VIEW_DEFINE_H__
#define __VIEW_DEFINE_H__
#include "GDef.h"

const GUINT32 WM_TRAY_MESSAGE    = WM_USER + 10000;

const GUINT32 EVT_APP_MSGBOX     =  WM_USER + 10001;

const GUINT32 EVT_FIND_NEW_DEVICE = WM_USER + 10002;
const GUINT32 EVT_CONNECT_REQUEST = WM_USER + 10003;
const GUINT32 EVT_SETPIN_PIN_ERR = WM_USER + 10006;
const GUINT32 EVT_SETPIN_REJECT = WM_USER + 10007;
const GUINT32 EVT_HFP_APP_DISCONN_INDI = WM_USER + 10010;

const GUINT32 EVT_DEVICE_SEARCH_REP = WM_USER + 10011;
const GUINT32 EVT_DEVICE_SEARCH_IND = WM_USER + 10012;
const GUINT32 EVT_SET_PIN_REP = WM_USER + 10013;
const GUINT32 EVT_SERVICE_SEARCH_REP = WM_USER + 10014;
const GUINT32 EVT_SET_MODE_REP = WM_USER + 10015;
const GUINT32 EVT_CONNECT_REQ_IND = WM_USER + 10016;
const GUINT32 EVT_DEVICE_CONNECTED_IND = WM_USER + 10017;

const GUINT32 WM_HFP_IND_DISCONNECTED = WM_USER + 10018;
const GUINT32 WM_HFP_IND_CONNECTED = WM_USER + 10019;

const GUINT32 EVT_A2DP_IND_DISCONNECTED = WM_USER + 10021;
const GUINT32 EVT_A2DP_REP_CONNECTED = WM_USER + 10022;
const GUINT32 EVT_A2DP_IND_SUSPENDED = WM_USER + 10023;
const GUINT32 EVT_A2DP_IND_STREAMING = WM_USER + 10024;
const GUINT32 EVT_A2DP_REP_DISCONNECTED = WM_USER + 10025;

const GUINT32 EVT_DUN_REP_DISCONNECTED = WM_USER + 10026;
const GUINT32 EVT_DUN_REP_CONNECTED = WM_USER + 10027;
const GUINT32 EVT_DUN_IND_DISCONNECTED = WM_USER + 10028;
const GUINT32 EVT_DUN_IND_CONNECTED = WM_USER + 10029;

const GUINT32 EVT_PBMGR_REP_CONNECTED = WM_USER + 10030;
const GUINT32 EVT_PBMGR_REP_DISCONNECTED = WM_USER + 10031;

const GUINT32 EVT_APP_ANIMATE = WM_USER + 10032;
const GUINT32 EVT_STOP_ANIMATE = WM_USER + 10033;

const GUINT32 EVT_SHELL_SET_MODE = WM_USER + 10034;
const GUINT32 EVT_SHELL_GET_MODE = WM_USER + 10035;

const GUINT32 EVT_A2DP_IND_CONNECTED = WM_USER + 10036;


const GUINT32 EVT_AVRCP_REP_CONNECTED = WM_USER + 10037;
const GUINT32 EVT_AVRCP_REP_DISCONNECTED = WM_USER + 10038;

const GUINT32 EVT_PBAP_RECORD = WM_USER + 10039;
const GUINT32 EVT_PBAP_DOWNLOAD_COMPLETE = WM_USER + 10040;

// PBAP Messages
const GUINT32 WM_PBMGR_QUIT = WM_USER + 10101;
const GUINT32 WM_PBMGR_DOWNLAOD_PHONEBOOK = WM_USER + 10102;
const GUINT32 WM_PBMGR_DOWNLOAD_INCOMING_CALLS_HISTORY = WM_USER + 10103;
const GUINT32 WM_PBMGR_DOWNLAOD_MISSED_CALLLIST = WM_USER + 10104;
const GUINT32 WM_PBMGR_DOWNLAOD_DIALOUT_CALLLIST = WM_USER + 10105;
const GUINT32 WM_PBMGR_DOWNLAOD_ALL_HISTORY = WM_USER + 10106;
const GUINT32 WM_PBMGR_CREATE_CONNECT = WM_USER + 10107;
const GUINT32 WM_PBMGR_CREATE_DISCONNECT = WM_USER + 10108;

// UI Messages
const GUINT32  WM_PBMGR_DOWNLAOD_ONE_SUCCESS = WM_USER + 10109;
const GUINT32  WM_PBMGR_DOWNLAOD_ALL_SUCCESS = WM_USER + 10110;
const GUINT32  WM_PBMGR_DOWNLAOD_FAILED = WM_USER + 10111;
const GUINT32  WM_PBMGR_CONNECT_FAILED = WM_USER + 10112;
const GUINT32  WM_PBMGR_LOCAL_LOAD_ONE_SUCCESS = WM_USER + 10113;
const GUINT32  WM_PBMGR_LOCAL_LOAD_ALL_SUCCESS = WM_USER + 10114;
const GUINT32  WM_PBMGR_LOCAL_LOAD_FAILED = WM_USER + 10115;

//HSPG Messages
const GUINT32  EVT_HSPG_IND_CONNECTED = WM_USER + 10201;
const GUINT32  EVT_HSPG_IND_DISCONNECTED = WM_USER + 10202;
const GUINT32  EVT_HSPG_IND_RING = WM_USER + 10203;

//HSPG Audio On or Off Messages
const GUINT32  EVT_HSPG_AUDIO_ON = WM_USER + 10204;
const GUINT32  EVT_HSPG_AUDIO_OFF = WM_USER + 10205;

const GUINT32  EVT_AVRCP_IND_CONNECTED = WM_USER + 10207;
const GUINT32  EVT_AVRCP_IND_DISCONNECTED = WM_USER + 10208;

//BT_EVT
const GUINT32 WM_BT_EVT_MSG = WM_USER + 10209;
const GUINT32 MSG_SETTINGS_CHANGE = WM_USER + 10210;
typedef enum
{
    MSG_SETTINGS_CHANGE_SYS_LANGUAGE  = 0,
    MSG_SETTINGS_CHANGE_NUM ,
}_PARA_OF_MSG_SETTINGS;


const GUINT32 EVT_BT_REPAINT = 10;


 
 
static UINT WM_BT_OUTMSG_CALLSTATUS = RegisterWindowMessage(TEXT("WM_BT_OUTMSG_CALLSTATUS"));
static UINT  WM_BT_INMSG_SHOWHIDE_FLOATINGWND = RegisterWindowMessage(TEXT("WM_BT_INMSG_SHOWHIDE_FLOATINGWND"));

typedef enum 
{ 
	DS_IDLE = 0,  //PhoneLink is running, but no phone connected. 
	DS_STANDBY,  // PhoneLink is running, and phone is connected. 
	DS_INCOMINGCALL,  //There is an incoming call 
	DS_OUTGOINGCALL,  //A call is dialing out. 
	DS_ONGOINGCALL,  //A call is picked up 
	DS_TERMINATED, //À¶ÑÀ¹Ò¶Ï
	DS_PLAYMUSIC,
	DS_STOPMUSIC,

} BT_DIALERSTATE;
 
 

static TCHAR _szVersion[] = _T("( Build BTSuite_V2.04_20090513_005 )");
typedef enum _SCREEN_ANGLE {
    SCR_ANGLE_0,
    SCR_ANGLE_90,
    SCR_ANGLE_180,
    SCR_ANGLE_270
}SCREEN_ANGLE;

typedef struct  _GPS_ENTRY_ARG
{
	GHWND hWnd;
	GCHAR *szMapPath;
	GCHAR *szGPSDev;
}GPS_ENTRY_ARG_T;

const GINT32 TIMER_ANIMATE = 100;
const GINT32 TIMRE_POWER = 1000;

#endif